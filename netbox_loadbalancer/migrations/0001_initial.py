# Generated by Django 4.1.7 on 2023-04-13 02:03

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('virtualization', '0034_standardize_description_comments'),
        ('extras', '0084_staging'),
        ('ipam', '0064_clear_search_cache'),
        ('tenancy', '0009_standardize_description_comments'),
        ('dcim', '0167_module_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='LBCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('describe', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('physical_device', models.ManyToManyField(blank=True, default=None, related_name='LB_cluster_physical_devices', to='dcim.device')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('virtual_device', models.ManyToManyField(blank=True, default=None, related_name='LB_cluster_virtual_devices', to='virtualization.virtualmachine')),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='LBPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('uri', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=20)),
                ('describe', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='LB_pools', to='netbox_loadbalancer.LBcluster')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='LBVirtualServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('port', models.IntegerField()),
                ('vip_type', models.CharField(blank=True, max_length=20)),
                ('protocol', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=20)),
                ('describe', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='LB_vips', to='netbox_loadbalancer.LBcluster')),
                ('ip', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='LB_vips', to='ipam.ipaddress')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='LB_owner', to='tenancy.contact')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('-pk',),
                'unique_together': {('name', 'ip')},
            },
        ),
        migrations.CreateModel(
            name='LBPoolNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('port', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('describe', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='LB_nodes', to='netbox_loadbalancer.LBcluster')),
                ('physical_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='LB_pool_node_physical_devices', to='dcim.device')),
                ('pool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='LB_pool_node', to='netbox_loadbalancer.LBpool')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('virtual_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='LB_pool_node_virtual_devices', to='virtualization.virtualmachine')),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.AddField(
            model_name='LBpool',
            name='vip',
            field=models.ManyToManyField(blank=True, default=None, related_name='pools', to='netbox_loadbalancer.LBvirtualserver'),
        ),
    ]
